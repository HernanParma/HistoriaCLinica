// js/environment-config.js
// Configuraci√≥n autom√°tica de entorno que detecta si estamos en desarrollo o producci√≥n
(function() {
    'use strict';
    
    console.log('üîß Detectando entorno de ejecuci√≥n...');
    
    // Funci√≥n para detectar el entorno
    function detectEnvironment() {
        const hostname = window.location.hostname;
        const protocol = window.location.protocol;
        
        console.log('üìç Hostname:', hostname);
        console.log('üîí Protocolo:', protocol);
        
        // Si estamos en localhost o 127.0.0.1, es desarrollo
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            console.log('üè† Entorno de DESARROLLO detectado');
            return 'development';
        }
        
        // Si estamos en historia.runasp.net o runasp.net, es producci√≥n
        if (hostname.includes('historia.runasp.net') || hostname.includes('runasp.net')) {
            console.log('üöÄ Entorno de PRODUCCI√ìN detectado');
            return 'production';
        }
        
        // Fallback: usar producci√≥n por defecto
        console.log('‚ö†Ô∏è Entorno no reconocido, usando PRODUCCI√ìN por defecto');
        return 'production';
    }
    
    // Funci√≥n para cargar la configuraci√≥n seg√∫n el entorno
    function loadEnvironmentConfig() {
        const environment = detectEnvironment();
        
        if (environment === 'development') {
            console.log('üìÅ Cargando configuraci√≥n de DESARROLLO...');
            loadScript('js/development-config.js');
            return 'development';
        } else {
            console.log('üìÅ Cargando configuraci√≥n de PRODUCCI√ìN...');
            loadScript('js/production-config.js');
            return 'production';
        }
    }
    
    // Funci√≥n para cargar scripts din√°micamente
    function loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = () => {
                console.log('‚úÖ Script cargado:', src);
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå Error al cargar script:', src);
                reject(new Error(`Error al cargar script: ${src}`));
            };
            document.head.appendChild(script);
        });
    }
    
    // Cargar la configuraci√≥n del entorno
    const currentEnvironment = loadEnvironmentConfig();
    
    // Configuraci√≥n global b√°sica que estar√° disponible inmediatamente
    window.ENVIRONMENT = currentEnvironment;
    
    console.log('‚úÖ Entorno configurado:', currentEnvironment);
    
})();
